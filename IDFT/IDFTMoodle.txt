#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926535

struct Cabecera {
    char riff[4];
    int tamArchivo;
    char wave[4]; 
    
    char fmt[4];
    int tamSubBloque;
    short tipoGrabacion;
    short numeroCanales;
    int frecuenciaMuestreo;
    int bps;
    short alineamiento;
    short bpm;

    char data[4];
    int tamSubBloque2; 
};

typedef struct Cabecera Cabecera;

FILE* abrirArchivo(char *, int);
void cerrarArchivo(FILE *);
Cabecera *obtenerCabecera(Cabecera *, FILE *);
short *muestrearSenial(FILE *, int, short *);
char *obtenerPie(FILE *, char*, int);
void colocarPie(FILE *, char *, int);
short *obtenerCanal1(short *, short *, int);
short *obtenerCanal2(short *, short *, int);
int numeroDeMuestras(int, int);
void preparacionIDFT(char *, char *);
double *idft(short *, short *, double *, int);

int main(int argc, char **argv) {
    if(argc != 3) {
        printf("Entrada Invalida\n");
        printf("Ejemplo:\n");
        printf("./NombrePrograma Archivo1.wav Archivo2.wav");
        exit(EXIT_FAILURE);
    }

    preparacionIDFT(argv[1], argv[2]);
}

FILE* abrirArchivo(char *archivo, int modo) {
    FILE* descriptor = NULL;

    if (modo == 1) 
        descriptor = fopen(archivo, "rb"); 
    else 
        descriptor = fopen(archivo, "wb");
    
    if(descriptor == NULL) { 
        printf("No se pudo abrir el archivo\n");
        exit(EXIT_FAILURE);
    }

    return descriptor;
}

void cerrarArchivo(FILE *dArchivo) {
    fclose(dArchivo);
}

Cabecera *obtenerCabecera(Cabecera* c, FILE* dArchivo) {
    fread(c, 44, 1, (FILE *) dArchivo);
    return c;
}

short *muestrearSenial(FILE* dArchivo, int numeroMuestras, short* signal) { 
    fread(signal, numeroMuestras * sizeof(short), 1, (FILE *) dArchivo);
    return signal;
}

short *obtenerCanal1(short *signal, short *canal1, int numeroMuestras) {
    for (int i = 0; i < (numeroMuestras); i++)
        canal1[i] = signal[2 * i];

    return canal1;
}

short *obtenerCanal2(short *signal, short *canal2, int numeroMuestras) {
    for (int i = 0; i < (numeroMuestras); i++)
        canal2[i] = signal[(2 * i) + 1];

    return canal2;
} 

char *obtenerPie(FILE* dArchivo, char* pie, int bytesPie) {
    fread(pie, bytesPie, 1, (FILE *) dArchivo);
    return pie;
}

void colocarPie(FILE* dArchivoSalida, char *pie, int bytesPie) {
    fwrite(pie, sizeof(char) * bytesPie, 1, (FILE *) dArchivoSalida);
}

int numeroDeMuestras(int tamSubBloque2, int bpm) {
    return (tamSubBloque2 / (bpm / 8));
}

void preparacionIDFT(char* archivo, char* archivoSalida) {
    FILE* dArchivo;
    FILE* dArchivoSalida;
    Cabecera *c = NULL;
    int numeroMuestras = 0;
    short* canal1 = NULL;
    short* canal2 = NULL;
    short* signal = NULL;
    char* pie = NULL;
    int bytesPie = 0;
    double* signalIDFT = NULL;
    short* muestras = NULL;

    dArchivo = abrirArchivo(archivo, 1);

    c = malloc(sizeof(Cabecera));
    c = obtenerCabecera(c, dArchivo);

    numeroMuestras = numeroDeMuestras(c -> tamSubBloque2, c -> bpm);

    signal = malloc(sizeof(short) * (numeroMuestras));
    signal = muestrearSenial(dArchivo, (numeroMuestras), signal);

    bytesPie = (c -> tamArchivo) - (c -> tamSubBloque2) - 36;
    pie = malloc(sizeof(char) * bytesPie);
    pie = obtenerPie(dArchivo, pie, numeroMuestras);

    cerrarArchivo(dArchivo);

    canal1 = malloc(sizeof(canal1) * (numeroMuestras / 2));
    canal2 = malloc(sizeof(canal2) * (numeroMuestras / 2));

    canal1 = obtenerCanal1(signal, canal1, numeroMuestras / 2);
    canal2 = obtenerCanal2(signal, canal2, numeroMuestras / 2);

    signalIDFT = malloc(sizeof(double) * (numeroMuestras));
    signalIDFT = idft(canal1, canal2, signalIDFT, numeroMuestras);

    muestras = malloc(sizeof(short) * numeroMuestras);

    for(int i = 0; i < numeroMuestras; i++) { 
        muestras[i] = signalIDFT[i];
    }

    dArchivoSalida = abrirArchivo(archivoSalida, 2);
    fwrite(c, 44, 1, (FILE *) dArchivoSalida);

    fwrite(muestras, c -> tamSubBloque2, 1, (FILE *) dArchivoSalida);

    fwrite(pie, sizeof(char) * bytesPie, 1, (FILE *) dArchivoSalida);

    cerrarArchivo(dArchivoSalida);

    free(c);
    free(signal);
    free(pie);
    free(canal1);
    free(canal2);
    free(signalIDFT);
    free(muestras);
}

double *idft(short *canal1, short *canal2, double *signalIDFT, int numeroMuestras) {
    double cons = ((2 * PI) / (numeroMuestras / 2));

    for(int n = 0; n < (numeroMuestras / 2); n++) {
        signalIDFT[2 * n] = 0;
        signalIDFT[(2 * n) + 1] = 0;

        for(int k = 0; k < (numeroMuestras / 2); k++) {
            signalIDFT[2 * n] += ((canal1[k] * cos(cons * k * n)) - (canal2[k] * sin(cons * k * n)));
        }

        if(signalIDFT[2 * n] > 32767)
            signalIDFT[2 * n] = 32767;
        else if(signalIDFT[2 * n] < -32768)
            signalIDFT[2 * n] = -32768;

        for(int k = 0; k < (numeroMuestras / 2); k++) {
            signalIDFT[(2 * n) + 1] += ((canal1[k] * sin(cons * k * n)) + (canal2[k] * cos(cons * k * n)));
        }

        if(signalIDFT[(2 * n) + 1] > 32767)
            signalIDFT[(2 * n) + 1] = 32767;
        else if(signalIDFT[(2 * n) + 1] < -32768)
            signalIDFT[(2 * n) + 1] = -32768;
    }

    return signalIDFT;
}